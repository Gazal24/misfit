%table.narrow.form{:width => '100%', :cellpadding => 2}
  %thead
    %tr
      %th on name
      %th loan id
      %th amount
      %th outstanding
      %th disbursed on
      %th installment
      %th principal due
      %th interest due
      %th fee due
      %th total due
  %tbody
    - histories = LoanHistory.all(:loan_id => loans.map{|x| x.id}, :date => @date)
    - fees_applicable = Fee.due(loans.map{|x| x.id})
    - tot_amount, tot_outstanding, tot_installments, tot_principal, tot_interest, tot_fee, tot_total = 0, 0, 0, 0, 0, 0, 0
    - clients.group_by{|x| x.client_group}.sort_by{|x| x[0] ? x[0].name : "none"}.each do |group, client_grouped|
      %tr.group
        %td{:colspan => 10}
          =group ? group.name : "none"
      - grp_amount, grp_outstanding, grp_installments, grp_principal, grp_interest, grp_fee, grp_total = 0, 0, 0, 0, 0, 0, 0
      -client_grouped.each do |client| 
        - loan_row_count = 0
        - loans.find_all{|x| x.client_id==client.id and x.disbursal_date}.each do |loan|
          - #next if [nil, :repaid, :pending].include? loan.status
          - lh = histories.find_all{|x| x.loan_id==loan.id}.sort_by{|x| x.created_at}[-1]
          - loan_row_count += 1
          %tr{ :class => cycle('odd','') }
            - fee = 0
            %td
              %b= link_to loan.client.name, resource(branch, center, loan.client)
            %td
              = link_to loan.id, url(:quick_link, "loans", loan.id)
            %td.numeric
              - i = loan.amount
              %b= i.to_currency
              - tot_amount += i
              - grp_amount += i
            %td.numeric
              - i = lh ? lh.actual_outstanding_principal : 0
              %b= i.to_currency
              - tot_outstanding += i
              - grp_outstanding += i
            %td
              = loan.disbursal_date.to_s
            %td.numeric
              - i = loan.number_of_installments_before(date)
              = i
              - tot_installments += i
              - grp_installments += i
            %td.numeric
              - i = [(lh ? lh.principal_due : 0), 0].max
              = i.to_currency
              - tot_principal += i
              - grp_principal += i
            %td.numeric
              - i = [(lh ? lh.interest_due : 0), 0].max
              = i.to_currency
              - tot_interest += i
              - grp_interest += i
            %td.numeric
              /- fee = loan.fees_paid? ? 0 : loan.fees_payable_on(date).values.inject(0){|s, x| s+=x}
              - fee = fees_applicable[loan.id].due
              = fee.to_currency
              - tot_fee += fee
              - grp_fee += fee
            %td.numeric
              - i = [(lh ? (lh.principal_due+lh.interest_due): 0), 0].max
              = (i+fee).to_currency
              - tot_total += (i + fee)
              - grp_total += (i + fee)
        - if loan_row_count == 0
          %tr{ :class => cycle('odd','') }
            %td
              %b= link_to client.name, resource(branch, center, client)
            %td{ :colspan => 4 }
              %i nothing outstanding
      %tr{:style => 'border-bottom: 1px solid;'}
        %td{:colspan => 2}
        %td.numeric
          %b= grp_amount.to_currency
        %td.numeric
          %b= grp_outstanding.to_currency
        %td{:colspan => 2}
        %td.numeric
          %b= grp_principal.to_currency
        %td.numeric
          %b= grp_interest.to_currency
        %td.numeric
          %b= grp_fee.to_currency
        %td.numeric
          %b= grp_total.to_currency
    %tr{:style => 'border-bottom: 2px solid;' }  
    %tr
      %td
      %td
      %td.numeric
        %b= tot_amount.to_currency
      %td.numeric
        %b= tot_outstanding.to_currency
      %td
      %td
      %td.numeric
        %b= tot_principal.to_currency
      %td.numeric
        %b= tot_interest.to_currency
      %td.numeric
        %b= tot_fee.to_currency
      %td.numeric
        %b= tot_total.to_currency
      
  %tfoot    
    %tr
      %td{ :colspan => 11 }  
