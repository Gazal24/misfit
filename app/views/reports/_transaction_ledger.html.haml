= form_for(@report, :action => url(:show_report, :report_type => "TransactionLedger"), :method => :get) do
  %table
    - branch_id = (params[:transaction_ledger] and params[:transaction_ledger][:branch_id]) ? params[:transaction_ledger][:branch_id] : nil
    - center_id = (params[:transaction_ledger] and params[:transaction_ledger][:center_id]) ? params[:transaction_ledger][:center_id] : nil
    - staff_member_id = (params[:transaction_ledger] and params[:transaction_ledger][:staff_member_id]) ? params[:transaction_ledger][:staff_member_id] : nil
    %tr
      %td
        From date: 
        =date_select_for(@report, "from_date", :date => @report.from_date)
      %td
        Upto date: 
        =date_select_for(@report, "to_date", :date => @report.to_date)
      %td
        Staff members:
        =select(:staff_member_id , :collection => StaffMember.all.map{|x| [x.id, x.name]}, :include_blank => true, :selected => staff_member_id)
    %tr
      %td
        Branch:
        =select(:branch_id , :collection => Branch.all, :value_method => :id, :text_method => :name, :include_blank => true, :selected => branch_id)
      %td
        Center:
        - if (staff_member_id and not staff_member_id.blank?)
          - centers = StaffMember.get(staff_member_id).centers
        - else
          - centers = (branch_id and not branch_id.blank?) ? Center.all(:branch_id => branch_id, :order => [:name]) : Center.all(:order => [:name])
        =select(:center_id , :collection => centers.all.map{|x| [x.id, "#{x.branch.name} -- #{x.name}"]}, :include_blank => true, :selected => center_id)
      %td
        =submit "Go"

%table.report
  %tr
    %th{:width => '20%'}
      Date
    %th{:width => '20%'}
      Client
    %th
      Disbursed
    %th{:colspan => "4"}
      Payment
  %tr
    %th
    %th
    %th
    %th
      Principal
    %th
      Interest
    %th
      Fee
    %th
      Total
  - center_id, branch_id = nil, nil
  - length = 7
  - groups_available = @payments.values.collect{|x| x.keys}.flatten.uniq
  -@clients.each do |branch_id, centers|
    -if centers.keys.length>0
      -branch_total = []
      %tr
        %td.branch{:colspan => length}
          %b
            =@branches[branch_id].name
      -centers.sort_by{|center_id, groups| @centers[center_id].name}.each do |center_id, groups|
        -if groups.keys.length>0 and (groups.keys & groups_available).length>0
          %tr
            %td.center{:colspan => length}
              %b
                =@centers[center_id].name
          - center_total = Array.new(length-2, 0)
          -groups.sort_by{|x| @groups[x[0]].name}.each do |group_id, clients|
            -if groups_available.include?(group_id)
              -group_total = Array.new(length-2, 0)
              %tr
                %td.group{:colspan => length}
                  %b=@groups[group_id].name

              -@payments.keys.sort.each do |date|
                -date_total = Array.new(length-2, 0)
                -if @payments[date] and @payments[date][group_id] and @payments[date][group_id].keys.length>0
                  -@payments[date][group_id].keys.sort_by{|x| clients.find{|c| c.id==x}.name}.each do |client_id|
                    -itr=@payments[date][group_id][client_id].collect{|x| x.length}.max
                    -itr.times do |i|
                      %tr
                        %td
                          = date
                        %td
                          =clients.find{|x| x.id==client_id}.name
                        -sum=0
                        -@payments[date][group_id][client_id].each_with_index do |e, col|
                          %td
                            -if e[i]
                              =e[i]
                              -e_val = e[i]
                              -sum += e_val
                              -center_total[col]+= e_val
                              -group_total[col] += e_val
                              -date_total[col]  += e_val
                            -else
                              0
                        %td
                          =sum
                          -center_total[-1]+= sum
                          -group_total[-1] += sum
                          -date_total[-1]  += sum
                  %tr
                    %td.group_total
                      %b
                        Date total
                    %td
                      -date_total.each do |ele|
                        %td
                          %b=ele
              %tr
                %td.group_total
                  %b==Group total
                %td
                -group_total.each do |ele|
                  %td
                    %b
                      =ele
          %tr
            %td.center_total
              %b==Center total:
              -branch_total.push(center_total)
            %td
            -center_total.each do |ele|
              %td
                %b
                  =ele
      - branch_sum_arr = branch_total.transpose.collect{|arr| arr.reduce{|s, x| s+=x}}
      - if branch_sum_arr.reduce{|x, sum| sum+=x}
        %tr
          %td.branch_total
            %b==Branch total:
          %td
          -branch_total.transpose.collect{|arr| arr.reduce{|s, x| s+=x}}.each do |ele|
            %td
              %b
                =ele
