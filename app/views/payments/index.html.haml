- if @loan.disbursal_date
  .graph
    = ofc2(430, 250, 'http://' + (request.env['HTTP_HOST'] or 'example.org') + url(:graph_data, :action => 'loan', :id => @loan.id, :scope_unit => 'months', :scope_size => 3) )

= error_messages_for @payment
%h1
  Loan
  = link_to "##{@loan.id}", url_for_loan(@loan)
  by client
  = link_to "<i>#{@client.name}</i>", resource(@branch, @center, @client)

%table.narrow.form{ :width => '50%' }
  %tr.odd
    %td{ :width => '30%' } amount
    %td
      == <b>#{@loan.amount}</b> @
      %b= format("%.2f%", @loan.interest_rate*100)
  %tr
    %td type
    %td= @loan.discriminator
  %tr.odd
    %td installments
    %td
      = @loan.number_of_installments
      = @loan.installment_frequency
      == (#{@loan.number_of_installments_before(Date.today)} past installments)
  %tr
    %td application
    %td
      on
      = @loan.applied_on
      by
      %b= link_to @loan.applied_by.name, resource(@loan.applied_by)
  %tr.odd
    %td approval
    %td
      - if @loan.approved_on
        on
        = @loan.approved_on
        by
        %b= link_to @loan.approved_by.name, resource(@loan.approved_by)
      - else
        %i approval is pending
  %tr
    %td disbursed
    %td
      - if @loan.disbursal_date
        on
        = @loan.disbursal_date
        by
        %b= link_to @loan.disbursed_by.name, resource(@loan.disbursed_by)
      - else
        to be disbursed on
        = @loan.scheduled_disbursal_date
  %tr.odd
    %td first payment
    %td
      - if @loan.payments.empty?
        = @loan.scheduled_first_payment_date
        %br/
        %span.greytext (scheduled, no payments yet)
      - else
        = actual_first_payment = @loan.payments.first(:order => [:received_on]).received_on
        %br/
        %span.greytext
          - if actual_first_payment == @loan.scheduled_first_payment_date
            as scheduled
          - else
            = difference_in_days(@loan.scheduled_first_payment_date, actual_first_payment, ['days earlier', 'days later'])
            then scheduled
            == (#{@loan.scheduled_disbursal_date})
  %tr
    %td status
    %td
      %b= @loan.status.to_s.gsub('_', ' ')
      - if @loan.status == :written_off
        by
        %b= link_to @loan.written_off_by.name, resource(@loan.written_off_by)

= link_to 'edit this loan >>', url_for_loan(@loan, 'edit'), :class => "button"


%h2== Payments &mdash; (#{link_to 'new', url_for_loan(@loan, 'payments/new')})

- if @loan.payments.blank?
  %p
    %i No payments have been made so far.
- else
  %table.narrow.form{ :width => '100%' }
    %thead
      %tr
        %th
        %th id
        %th received on
        %th received by
        %th principal
        %th interest
        %th total
        %th delete
    %tbody
    - for payment in @loan.payments
      %tr{ :class => cycle('odd','') }
        %td &nbsp;
        %td
          = payment.id
        %td
          %i= payment.received_on
        %td
          %b= link_to payment.received_by.name, resource(payment.received_by)
        %td
          %b= payment.principal
        %td
          %b= payment.interest
        %td
          %b= payment.total
        %td
          = link_to 'delete', url_for_loan(@loan, "payments/#{payment.id}/delete")

    %tfoot
      %tr
        %td{ :colspan => 8 }

%p= link_to 'new payment >>', url_for_loan(@loan, 'payments/new'), :class => "button"


%h2== Payment schedule
%table.narrow.form{ :width => '100%' }
  %thead
    %tr
      %th
      %th date due
      %th scheduled balance
      %th scheduled payment
      %th actual balance
      %th actual payments
      %th difference
  %tbody
  - first, passed = true, false  # these are for printing the "today" row
  - last_payment = @loan.payments.first(:order => [:received_on.desc])
  - last_payment_date = last_payment.received_on if last_payment
  - principal_so_far = interest_so_far = principal_received_so_far = interest_received_so_far = 0
  - @loan.history.each_with_index do |h,i|
    - principal_so_far += h.principal_due
    - interest_so_far += h.interest_due
    - principal_received_so_far += h.principal_paid
    - interest_received_so_far += h.interest_paid
    - scheduled_principal = i > 0 ? @loan.history[i-1].scheduled_outstanding_principal - h.scheduled_outstanding_principal : 0
    - scheduled_interest = i > 0 ? @loan.history[i-1].scheduled_outstanding_total - h.scheduled_outstanding_total - scheduled_principal : 0
    - if h.date > Date.today and not passed
      - passed = true
      - if not first
        %tr{ :class => cycle('odd','') }
          %td{ :colspan => 6, :style => "text-align: center;" }
            %span.greytext== today (#{Date.today})
    - first = false
    %tr{ :class => cycle('odd','') }
      %td &nbsp;
      %td
        = h.date
      %td
        %b= format_currency h.scheduled_outstanding_principal
      %td
        %b= format_currency (scheduled_principal + scheduled_interest)
        %br/
        %span.greytext== #{scheduled_principal.round} principal + #{scheduled_interest.round} interest
      %td
        - if last_payment_date and (h.date <= last_payment_date or h.date <= Date.today)
          %b= format_currency h.actual_outstanding_principal
      %td
        - if last_payment_date and (h.date <= last_payment_date or h.date <= Date.today)
          %b= format_currency principal_received_so_far + interest_received_so_far
          %br/
          %span.greytext
            == #{principal_received_so_far} principal + #{interest_received_so_far} interest
      %td
        - if h.date <= Date.today
          %b
            %span{ :class => (h.amount_in_default > 0 ? 'red' : 'green') }
              = format_currency h.amount_in_default.abs
          %br/
          %span.greytext
            %span{ :class => (h.amount_in_default > 0 ? 'red' : 'green') }
              = format("%.0f%", (h.amount_in_default.abs.to_f / @loan.total_to_be_received) * 100)
            = h.amount_in_default <= 0 ? 'overpaid' : 'shortfall'
  %tfoot
    %tr
      %td{ :colspan => 7 }