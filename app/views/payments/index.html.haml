.graph
  = ofc2(430, 250, 'http://' + request.env['HTTP_HOST'] + url(:graph_data, :action => 'loan', :id => @loan.id, :scope_unit => 'months', :scope_size => 3) )


%h1
  Loan
  = link_to "##{@loan.id}", resource(@branch, @center, @client, @loan)
  by client
  = link_to "<i>#{@client.name}</i>", resource(@branch, @center, @client)

%table.narrow.form{ :width => '50%' }
  %tr.odd
    %td{ :width => '30%' } amount
    %td
      == <b>#{@loan.amount}</b> @
      %b= format("%.2f%", @loan.interest_rate*100)
  %tr
    %td type
    %td= @loan.discriminator
  %tr.odd
    %td installments
    %td
      = @loan.number_of_installments
      = @loan.installment_frequency
      == (#{@loan.number_of_installments_before(Date.today)} past installments)
  %tr
    %td approved
    %td
      on
      = @loan.approved_on
      by
      %b= link_to @loan.approved_by.name, resource(@loan.disbursed_by)
  %tr.odd
    %td disbursed
    %td
      - if @loan.disbursal_date
        on
        = @loan.disbursal_date
        by
        %b= link_to @loan.disbursed_by.name, resource(@loan.disbursed_by)
      - else
        to be disbursed on
        = @loan.scheduled_disbursal_date
  %tr
    %td first payment
    %td
      - if @loan.payments.empty?
        = @loan.scheduled_first_payment_date
        %br/
        %span.greytext (scheduled, no payments yet)
      - else
        = actual_first_payment = @loan.payments.first(:order => [:received_on]).received_on
        %br/
        %span.greytext
          - if actual_first_payment == @loan.scheduled_first_payment_date
            as scheduled
          - else
            = difference_in_days(@loan.scheduled_first_payment_date, actual_first_payment, ['days earlier', 'days later'])
            then scheduled
            == (#{@loan.scheduled_disbursal_date})
  %tr.odd
    %td status
    %td
      %b= @loan.status.to_s.gsub('_', ' ')
      - if @loan.status == :written_off
        by
        %b= link_to @loan.written_off_by.name, resource(@loan.written_off_by)


%h2== Payments &mdash; (#{link_to 'new', resource(@branch, @center, @client, @loan, :payments, :new)})

%table.narrow.form{ :width => '100%' }
  %thead
    %tr
      %th
      %th id
      %th received on
      %th received by
      %th principal
      %th interest
      %th total
  %tbody
  - for payment in @payments
    %tr{ :class => cycle('odd','') }
      %td &nbsp;
      %td
        = payment.id
      %td
        %i= payment.received_on
      %td
        %b= link_to payment.received_by.name, resource(payment.received_by)
      %td
        %b= payment.principal
      %td
        %b= payment.interest
      %td
        %b= payment.total
      %td
        = link_to 'delete', resource(@branch, @center, @client, @loan, payment, :delete)

  %tfoot
    %tr
      %td{ :colspan => 7 }

%p= link_to 'new payment', resource(@branch, @center, @client, @loan, :payments, :new)


%h2== Payment schedule
%table.narrow.form{ :width => '100%' }
  %thead
    %tr
      %th
      %th date due
      %th scheduled payment
      %th total scheduled payments
      %th total received up to date due
      %th total difference on date due
  %tbody
  - first, passed = true, false  # these are for printing the "today" row
  - last_payment = @loan.payments.first(:order => [:received_on.desc])
  - last_payment_date = last_payment.received_on if last_payment
  - @loan.payment_schedule.each do |i|
    - if i[:date] > Date.today and not passed
      - passed = true
      - if not first
        %tr{ :class => cycle('odd','') }
          %td{ :colspan => 6, :style => "text-align: center;" }
            %span.greytext== today (#{Date.today})
    - first = false
    %tr{ :class => cycle('odd','') }
      %td &nbsp;
      %td
        = i[:date]
      %td
        %b= format_currency i[:principal] + i[:interest]
        %br/
        %span.greytext== #{i[:principal].round} principal + #{i[:interest].round} interest
      %td
        %b= format_currency i[:principal_so_far] + i[:interest_so_far]
        %br/
        %span.greytext== #{i[:principal_so_far].round} principal + #{i[:interest_so_far].round} interest
      %td
        - if last_payment_date and (i[:date] <= last_payment_date or i[:date] <= Date.today)
          %b= format_currency i[:principal_received_so_far] + i[:interest_received_so_far]
          %br/
          %span.greytext
            == #{i[:principal_received_so_far]} principal + #{i[:interest_received_so_far]} interest
      %td
        - if i[:date] <= Date.today
          - total_overpaid = i[:principal_overpaid] + i[:interest_overpaid]
          %b
            %span{ :class => (total_overpaid >= 0 ? 'green' : 'red') }
              = format_currency total_overpaid.abs
          %br/
          %span.greytext
            %span{ :class => (total_overpaid >= 0 ? 'green' : 'red') }
              = format("%.0f%", (total_overpaid.abs.to_f / @loan.total_to_be_received) * 100)
            = total_overpaid >= 0 ? 'overpaid' : 'shortfall'
  %tfoot
    %tr
      %td{ :colspan => 7 }